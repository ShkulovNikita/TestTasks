@using Task2.Models;
@using Task2.HtmlHelpers;
@using Microsoft.AspNetCore.Http;

@model Settings;

@{
    ViewData["Title"] = "RSS-фидер";

    // проверка модели на null
    bool modelIsOk = false;
    if (Model != null)
        modelIsOk = true;

    // сообщения со стороны сервера
    string success = null;
    if (TempData["Success"] != null)
        success = TempData["Success"].ToString();

    string error = null;
    if (TempData["Error"] != null)
        error = TempData["Error"].ToString();

    // ошибки валидации
    string validationErrors = null;
    if (TempData["ValidationError"] != null)
        validationErrors = TempData["ValidationError"].ToString();

    // получить частоту обновления из модели, если есть
    int updateTime = -1;
    if (Model != null)
        updateTime = Model.UpdateTime;

    // получить выбранный формат вывода описания
    bool formatted = true;
    if (Context.Session.GetString("format") == "False")
        formatted = false;
}

<div class="row">
    @if (modelIsOk)
    {
        <!--Блок ленты-->
        <div class="col-lg-9 col-xl-9 col-md-9 col-sm-12 col-xs-12">
            <!--Блок сообщений-->
            <div class="info-messages">
                @Html.CheckError(error)
                @Html.CheckSuccess(success)
            </div>

            <!--Сообщение, появляющееся во время загрузки данных из RSS-источников-->
            <div id="loading-message" class="alert alert-info"></div>

            <!--Лента-->
            <div class="rss-feed"></div>
        </div>
        <!--Блок настроек-->
        <div id="settings-menu" class="col-lg-3 col-xl-3 col-md-3 col-sm-12 col-xs-12">
            <h5>Настройки фидера</h5>
            <hr />
            @using (Html.BeginForm("UpdateSettings", "Home", FormMethod.Post))
            {
                <!--Поля для ввода ссылок на RSS-ленты-->
                @Html.CheckError(validationErrors);
                <label>Ленты</label>
                <div id="settings-feeds">
                    @foreach (string feed in Model.Feeds)
                    {
                        <div class="feed-field">
                            <input type="url" asp-for="Feeds" value="@feed" class="feed-link" />
                            <button type="button" class="btn btn-danger remove-feed">-</button>
                        </div>
                    }
                    <button type="button" class="btn btn-success add-feed">Добавить ленту</button>
                </div>

                <!--Периодичность обновления лент-->
                <div id="settings-frequency">
                    <label asp-for="UpdateTime">Частота обновления (секунды)</label><br />
                    <input id="update-time-field" type="number" asp-for="UpdateTime" min="1" max="2147483647" onmouseout="validateUpdateTime()" value="@Model.UpdateTime" />
                    <span asp-validation-for="UpdateTime"></span>
                </div>

                <!--Форматирование описаний статей по тегам-->
                <div id="settings-format">
                    <label>Вывод описания</label>
                    @if (formatted)
                    {
                        <p><input type="radio" name="format" value="false" /><span>Без форматирования</span><br /></p>
                        <p><input type="radio" name="format" value="true" checked /><span>С форматированием</span><br /></p>
                    }
                    else
                    {
                        <p><input type="radio" name="format" value="false" checked /><span>Без форматирования</span><br /></p>
                        <p><input type="radio" name="format" value="true" /><span>С форматированием</span><br /></p>
                    }
                </div>

                <input type="submit" id="settings-button" class="btn btn-primary" value="Сохранить" />
            }
        </div>
    }
    else
    {
        <!--Вывести ошибку, из-за которой не удалось загрузить страницу-->
        <div class="col-12">
            @Html.CheckError(error)
        </div>
    }
</div>

@section scripts {
    <!--Скрипты для валидации-->
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <!--Скрипты данного представления-->
    <script type="text/javascript">
        // действия, выполняемые сразу после загрузки страницы
        $(window).on('load', function () {
            // скрыть сообщение "Загрузка"
            $('#loading-message').hide();

            // выполнять загрузку лент, только если есть модель
            if (@modelIsOk.ToString().ToLower() == true) {
                // получить ленты
                getFeeds("first");
            }

            // скрыть сообщение о применении настроек, если оно есть
            hideSettingsMessage();
        });

        // флаг уже выполненной загрузки лент
        var feedsAreLoaded = false;

        // запрос получения выбранных пользователем лент
        // type: first - первичная загрузка, period - обновление
        function getFeeds(type) {
            // перед началом загрузки показать пользователю сообщение
            showLoadingMessage(type);

            // переменная для хранения позиции горизонтальной прокрутки
            var mainScrollPosition;
            // массив с позициями вертикальных прокруток
            var feedsScrollPositions = [];

            // выполнить запрос на получение RSS-лент
            $.ajax({
                url: '@Url.Action("RssFeeds")',
                success: function (data) {
                    // убрать сообщение "Загрузка..."
                    hideLoadingMessage();

                    // сохранить текущую позицию горизонтальной прокрутки
                    mainScrollPosition = $('#rss-feeds-wrapper').scrollLeft();

                    /* сохранить текущие позиции вертикальных прокруток */
                    // перебрать все ленты и сохранить
                    $('.feed-wrapper').each(function (index, item) {
                        feedsScrollPositions[index] = item.scrollTop;
                    });

                    // отобразить на странице полученные ленты
                    $('.rss-feed').replaceWith(data);
                    // переключить флаг
                    feedsAreLoaded = true;
                },
                error: function () {
                    hideLoadingMessage();
                },
                complete: function () {
                    // переместить горизонтальную полосу прокрутки на позицию до обновления
                    $('#rss-feeds-wrapper').scrollLeft(mainScrollPosition);
                    // переместить вертикальные полосы
                    $('.feed-wrapper').each(function (index, item) {
                        item.scrollTop = feedsScrollPositions[index];
                    });
                }
            });
        }

        // показать сообщение о выполнении загрузки
        function showLoadingMessage(type) {
            // на основе типа загрузки (первичная или повторная) вывести
            // соответствующий текст
            if (type == "first") {
                $('#loading-message').text("Загрузка...");
            }
            else {
                $('#loading-message').text("Обновление...");
            }
            // показать сообщение
            $('#loading-message').slideDown();
        }

        // скрыть сообщение о выполнении загрузки
        function hideLoadingMessage() {
            $('#loading-message').slideUp();
        }

        // скрыть сообщение об успешном применении настроек
        function hideSettingsMessage() {
            // скрыть с некоторой задержкой, чтобы пользователь
            // успел его прочитать
            setTimeout(function () {
                $('.alert-success').first().slideUp();
            }, 5000);
        }

        // периодическое обновление ленты
        $(function updater() {
            // функция будет срабатывать, только если была успешно загружена модель с частотой обновления
            if (@updateTime > 0) {
                // кроме того, ленты также должны быть уже успешно загружены
                if (feedsAreLoaded == true) {
                    // выполнить запрос для получения RSS-ленты
                    getFeeds("period");
                    // после выполнения запроса установить таймер
                    // на повторное обновление лент
                    setTimeout(updater, @updateTime * 1000);
                }
                // если ленты ещё не загружены, попытаться выполнить обновление
                // через некоторый период снова
                else {
                    setTimeout(updater, @updateTime * 1000);
                }
            }
        });

        // запомнить, что пользователь нажал на кнопку
        // отображения описания некоторой статьи
        $(document).on('click', '.button-show-description', function () {
            // получить идентификатор нажатой кнопки "Показать"
            var id = $(this).attr('id');
            // получить из идентификатора его численную часть
            id = id.replace('button_', '');

            // элемент со статьей
            var articleDescription = $('#article_' + id);

            // флаг, является ли описание статьи теперь показанным, после клика пользователя
            var nowOpened = false;

            // если есть класс "showed", то он уже был открыт ранее
            if (articleDescription.hasClass('showed')) {
                // в таком случае удалить этот класс
                articleDescription.removeClass('showed');
                // указать, что теперь элемент закрыт
                nowOpened = false;
            }
            // элемент теперь будет открыт
            else {
                // добавить класс-индикатор "showed"
                articleDescription.addClass('showed');
                // указать, что теперь элемент раскрыт
                nowOpened = true;
            }
            // сохранить в сессию, что данный элемент был открыт или закрыт
            $.ajax({
                type: 'POST',
                url: '@Url.Action("SaveDescriptionState")/',
                data: {
                    id: id,
                    isOpened: nowOpened
                },
                success: function (data) { }
            });
        });

        // добавление новой ленты
        $('#settings-feeds').on('click', '.add-feed', function () {
            // получить уже существующее поле для копирования
            var feedFieldTemplate = $('.feed-field:last');
            // добавить копию
            $(feedFieldTemplate).clone().appendTo('#settings-feeds').find("input[type='url']").val("");
            // переместить кнопку добавления в конец
            $(this).appendTo('#settings-feeds');
        });

        // удаление выбранной ленты
        $('#settings-feeds').on('click', '.remove-feed', function () {
            // проверить, сколько осталось полей для ввода ссылок ленты
            var amountLeft = $('.feed-field').length;
            // удалять, только если останется ещё хотя бы одно поле
            if (amountLeft > 1) {
                // получить поле с выбранной лентой
                var parentDiv = $(this).closest('.feed-field');
                // удалить его
                parentDiv.remove();
            }
            // в противном случае просто очистить
            else {
                $(this).closest('.feed-field').find("input[type='url']").val("");
            }
        });

        // автоматическая замена значений частоты обновления,
        // не соответствующих промежутку [1, maxint]
        function validateUpdateTime() {
            // текущее значение частоты обновления
            var input = $('#update-time-field').val();
            // если число отрицательное - заменить на "1"
            if (input <= 0) {
                $('#update-time-field').val(1);
            }
            // если слишком большое - заменить на maxint
            else if (input > 2147483647) {
                $('#update-time-field').val(2147483647);
            }
        }
    </script>
}
