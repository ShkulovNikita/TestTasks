#pragma checksum "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4a8b2b5ae2bf43f6d8bbf09646143a59404f17e6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Tasks\TestTasks\Task2\Task2\Views\_ViewImports.cshtml"
using Task2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Tasks\TestTasks\Task2\Task2\Views\_ViewImports.cshtml"
using Task2.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
using Task2.ViewModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
using Task2.HtmlHelpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
using Microsoft.AspNetCore.Http;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4a8b2b5ae2bf43f6d8bbf09646143a59404f17e6", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"30493c13d7ddaea2f7dcc0376a453c2288c625ce", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<FeedViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
#nullable restore
#line 7 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "RSS-фидер";

    // сообщения со стороны сервера
    string success = null;
    if (TempData["Success"] != null)
        success = TempData["Success"].ToString();

    string error = null;
    if (TempData["Error"] != null)
        error = TempData["Error"].ToString();

    // получить частоту обновления из модели, если есть
    int updateTime = -1;
    if (Model != null)
        updateTime = Model.UpdateTime;

    // получить выбранный формат вывода описания
    bool formatted = false;
    if (Context.Session.GetString("format") == "True")
        formatted = true;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"row\">\r\n");
#nullable restore
#line 31 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
     if (Model != null)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <!--Блок ленты-->\r\n        <div class=\"col-9\">\r\n            <!--Блок сообщений-->\r\n            ");
#nullable restore
#line 36 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
       Write(Html.CheckError(error));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n            ");
#nullable restore
#line 37 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
       Write(Html.CheckSuccess(success));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

            <!--Сообщение, появляющееся во время загрузки данных из RSS-источников-->
            <div id=""loading-message"" class=""alert alert-info""></div>

            <!--Лента-->
            <div class=""rss-feed""></div>
        </div>
        <!--Блок настроек-->
        <div class=""col-3"">
");
#nullable restore
#line 47 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
             using (Html.BeginForm("UpdateSettings", "Home", FormMethod.Post))
            {

#line default
#line hidden
#nullable disable
            WriteLiteral("                <!--Поля для ввода ссылок на RSS-ленты-->\r\n                <label>Ленты</label>\r\n                <div id=\"settings-feeds\">\r\n\r\n");
#nullable restore
#line 53 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                     foreach (string feed in Model.Feeds)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <div class=\"feed-field\">\r\n                            <input type=\"text\" name=\"feedLink\"");
            BeginWriteAttribute("value", " value=\"", 1698, "\"", 1711, 1);
#nullable restore
#line 56 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
WriteAttributeValue("", 1706, feed, 1706, 5, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"feed-link\" />\r\n                            <button type=\"button\" class=\"btn btn-danger remove-feed\">-</button>\r\n                        </div>\r\n");
#nullable restore
#line 59 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                    }

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <button type=\"button\" class=\"btn btn-success add-feed\">Добавить ленту</button>\r\n                </div>\r\n");
            WriteLiteral("                <!--Периодичность обновления лент-->\r\n                <input type=\"number\" name=\"updateTime\"");
            BeginWriteAttribute("value", " value=\"", 2121, "\"", 2146, 1);
#nullable restore
#line 64 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
WriteAttributeValue("", 2129, Model.UpdateTime, 2129, 17, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\r\n");
            WriteLiteral("                <!--Форматирование описаний статей по тегам-->\r\n                <label>Вывод описания</label>\r\n");
#nullable restore
#line 68 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                 if (formatted)
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <input type=\"radio\" name=\"format\" value=\"false\" /><span>Без форматирования</span><br />\r\n                    <input type=\"radio\" name=\"format\" value=\"true\" checked /><span>С форматированием</span><br />\r\n");
#nullable restore
#line 72 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                }
                else
                {

#line default
#line hidden
#nullable disable
            WriteLiteral("                    <input type=\"radio\" name=\"format\" value=\"false\" checked /><span>Без форматирования</span><br />\r\n                    <input type=\"radio\" name=\"format\" value=\"true\" /><span>С форматированием</span><br />\r\n");
#nullable restore
#line 77 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                }

#line default
#line hidden
#nullable disable
            WriteLiteral("                <input type=\"submit\" class=\"btn btn-primary\" value=\"Сохранить\" />\r\n");
#nullable restore
#line 80 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
            }

#line default
#line hidden
#nullable disable
            WriteLiteral("        </div>\r\n");
#nullable restore
#line 82 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
    }
    else
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <!--Вывести ошибку, из-за которой не удалось загрузить страницу-->\r\n        <div class=\"col-12\">\r\n            ");
#nullable restore
#line 87 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
       Write(Html.CheckError(error));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </div>\r\n");
#nullable restore
#line 89 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n\r\n");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        // действия, выполняемые сразу после загрузки страницы
        $(window).on('load', function () {
            // скрыть сообщение ""Загрузка""
            $('#loading-message').hide();

            // получить ленты после полной загрузки страницы
            getFeeds(""first"");

            // убрать с некоторой задержкой сообщение о применении настроек, если оно есть
            setTimeout(function () {
                $('.alert-success').first().slideUp();
            }, 5000);
        });

        // флаг уже выполненной загрузки лент
        var feedsAreLoaded = false;

        // запрос получения выбранных пользователем лент
        // type: first - первичная загрузка, period - обновление
        function getFeeds(type) {
            // перед началом загрузки показать пользователю
            // сообщение ""Загрузка..."" или ""Обновление...""
            if (type == ""first"") {
                $('#loading-message').text(""Загрузка..."");
      ");
                WriteLiteral(@"      }
            else {
                $('#loading-message').text(""Обновление..."");
            }

            $('#loading-message').slideDown();

            // выполнить запрос на получение RSS-лент
            $.ajax({
                type: 'GET',
                url: '");
#nullable restore
#line 128 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                 Write(Url.Action("RssFeeds"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"',
                success: function (data) {
                    // убрать сообщение ""Загрузка...""
                    $('#loading-message').slideUp();
                    // отобразить на странице полученные ленты
                    $('.rss-feed').replaceWith(data);
                    // переключить флаг
                    feedsAreLoaded = true;
                },
                error: function () {
                    $('#loading-message').slideUp();
                }
            });
        }

        // периодическое обновление ленты
        $(function updater() {
            // функция будет срабатывать, только если была успешно загружена модель
            if (");
#nullable restore
#line 146 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
           Write(updateTime);

#line default
#line hidden
#nullable disable
                WriteLiteral(@" > 0) {
                // кроме того, ленты также должны быть уже успешно загружены
                if (feedsAreLoaded == true) {
                    // выполнить запрос для получения RSS-ленты
                    getFeeds(""period"");
                    // после выполнения запроса установить таймер
                    // на повторное обновление лент
                    setTimeout(updater, ");
#nullable restore
#line 153 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                                   Write(updateTime);

#line default
#line hidden
#nullable disable
                WriteLiteral(");\r\n                }\r\n                // если ленты ещё не загружены, попытаться выполнить обновление\r\n                // через некоторый период снова\r\n                else {\r\n                    setTimeout(updater, ");
#nullable restore
#line 158 "D:\Tasks\TestTasks\Task2\Task2\Views\Home\Index.cshtml"
                                   Write(updateTime);

#line default
#line hidden
#nullable disable
                WriteLiteral(@");
                }
            }
        });

        // добавление новой ленты
        $('#settings-feeds').on('click', '.add-feed', function () {
            // получить уже существующее поле для копирования
            var feedFieldTemplate = $('.feed-field:last');

            // добавить копию
            $(feedFieldTemplate).clone().appendTo('#settings-feeds').find(""input[type='text']"").val("""");

            // переместить кнопку добавления в конец
            $(this).appendTo('#settings-feeds');
        });

        // удаление выбранной ленты
        $('#settings-feeds').on('click', '.remove-feed', function () {
            // проверить, сколько осталось полей для ввода ссылок ленты
            var amountLeft = $('.feed-field').length;

            // удалять, только если останется ещё хотя бы одно поле
            if (amountLeft > 1) {
                // получить поле с выбранной лентой
                var parentDiv = $(this).closest('.feed-field');
                // удал");
                WriteLiteral(@"ить его
                parentDiv.remove();
            }
            // в противном случае просто очистить
            else {
                $(this).closest('.feed-field').find(""input[type='text']"").val("""");
            }
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<FeedViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
